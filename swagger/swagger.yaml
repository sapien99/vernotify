openapi: 3.0.1
info:
  title: Spout
  description: 'Notifications for Releases and Tags'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Spout
  url: http://newsspout.com
servers:
#- url: https://versionspout.com
- url: http://versionspout.com:3000
tags:
- name: profile
  description: User Profile
- name: version
  description: Version Registry
- name: system
  description: System internal
paths:
  /healthz:
    get:
      tags:
      - system
      summary: health
      description: healthcheck, returns OK if server is up
      operationId: getHealth
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object                
        555:
          description: unsuccessful operation
          content:
            application/json:
              schema:
                type: object                
  /api/profiles:
    post:
      tags:
      - profile
      summary: Add a new user profile
      operationId: addProfile
      requestBody:
        description: Userprofile 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        409:
          description: Invalid state
          content: {}
        422:
          description: Invalid input
          content: {}
      security:
      - auth:
        - write:userprofile
        - read:userprofile
  /api/profiles/{profileId}:
    get:
      tags:
      - profile
      summary: get profile
      operationId: getProfile
      parameters:
      - name: profileId
        in: path
        description: Profile to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        404:
          description: Profile not found
          content: {}
      security:
      - auth:
        - write:userprofile
        - read:userprofile
    put:
      tags:
      - profile
      summary: Update an existing profile
      operationId: updateProfile
      parameters:
      - name: profileId
        in: path
        description: Profile to modify
        required: true
        schema:
          type: string
      requestBody:
        description: Userprofile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Profile not found
          content: {}
        422:
          description: Validation exception
          content: {}
      security:
      - auth:
        - write:userprofile
        - read:userprofile
    delete:
      tags:
      - profile
      summary: Deletes a Userprofile
      operationId: deleteProfile
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: profileId
        in: path
        description: Profile to delete
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Profile not found
          content: {}
      security:
      - auth:
        - write:userprofile
        - read:userprofile
  /api/profiles/{profileId}/news:
    get:
      tags:
      - profile
      summary: Returns docker versions matching to profile
      description: Returns versions matching to profile, persists status to prevent duplicate news
      operationId: findVersionsByProfile
      parameters:
      - name: profileId
        in: path
        description: Profile
        required: true
        schema:
          type: string
      - name: persist
        in: query
        description: persist status
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionManifest'
        400:
          description: Invalid status value
          content: {}
      security:
      - auth:
        - write:userprofile
        - read:userprofile
  /api/profiles/{profileId}/notifications:
    get:
      tags:
      - profile
      summary: Sends notifications on base of the user profile
      description: Trigger configured notifications
      operationId: sendNotificationsByProfile
      parameters:
      - name: profileId
        in: path
        description: Profile
        required: true
        schema:
          type: string
      - name: persist
        in: query
        description: persist status
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionManifest'
        400:
          description: Invalid status value
          content: {}
      security:
      - auth:
        - write:userprofile
        - read:userprofile
components:
  schemas:
    VersionManifest:
      type: object
      properties:
        type:
          type: string        
          enum:
            - docker
            - github
        subject:
          type: string        
        semver:
          type: string
        fetched:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: object
            properties:
              tag:
                type: string
              isSemver:
                type: boolean
              published:
                type: string
                format: date-time
              hashes:
                type: array
                items:
                  type: string
    VersionProfile:
      type: object      
      description: Docker Version Profile user is interested in
      properties:
        type:
          type: string
          enum:
            - docker
            - github
        subject:
          type: string
          description: docker repository/user
            ([docker.io/]sapien99)                
        semver:
          type: string
          description: semver range user is interested in (or not set for no semver check)
            (>2.7.0)
        notificationChannels:
          type: array
          items:
            type: string
          description: reference to defined notification channels
        ignorePatterns: 
          type: array
          items:
            type: string
          description: regex ignore patterns for tags (to skip latest, *.rc etc.)
      required: 
          - subject                    
    UserProfile:
      type: object
      properties:
        email:
          type: string
        notificationChannels:
          description: defined notification Channels
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: name of notification channel
              type:
                type: string
                description: type of notification channel
                enum:
                - mail
                - webhook
              config:
                type: object
                description: Configuration of channel
        defaults:
          type: object
          description: default values if not overruled version
          properties:
            notificationChannels:
              type: array
              description: possible notification channels
              items: 
                type: string
            ignorePatterns:
              type: array
              items:
                type: string
        subscribedDockerVersions:
          type: array
          items:
            $ref: '#/components/schemas/DockerImageVersionProfile'
      required: 
          - email
          - subscribedDockerVersions
  securitySchemes:
    auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://security.versionspout/oauth/dialog
          scopes:
            write:userprofile: write UserAccounts
            read:userprofile: read UserAccounts            
    api_key:
      type: apiKey
      name: api_key
      in: header